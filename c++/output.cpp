Matrix(char a, char b){
if(a=='X'){if(b=='X'){data[0][0] = std::complex<double>(1.000000, 0.000000); data[0][1] = std::complex<double>(0.000000, 0.000000); 
data[1][0] = std::complex<double>(0.000000, 0.000000); data[1][1] = std::complex<double>(1.000000, 0.000000); 
}else if(b=='Y'){data[0][0] = std::complex<double>(0.000000, 1.000000); data[0][1] = std::complex<double>(0.000000, 0.000000); 
data[1][0] = std::complex<double>(0.000000, 0.000000); data[1][1] = std::complex<double>(0.000000, -1.000000); 
}else if(b=='Z'){data[0][0] = std::complex<double>(0.000000, 0.000000); data[0][1] = std::complex<double>(-1.000000, 0.000000); 
data[1][0] = std::complex<double>(1.000000, 0.000000); data[1][1] = std::complex<double>(0.000000, 0.000000); 
}else if(b=='S'){data[0][0] = std::complex<double>(0.000000, 0.000000); data[0][1] = std::complex<double>(0.000000, 1.000000); 
data[1][0] = std::complex<double>(1.000000, 0.000000); data[1][1] = std::complex<double>(0.000000, 0.000000); 
}else if(b=='H'){data[0][0] = std::complex<double>(1.000000, 0.000000); data[0][1] = std::complex<double>(-1.000000, 0.000000); 
data[1][0] = std::complex<double>(1.000000, 0.000000); data[1][1] = std::complex<double>(1.000000, 0.000000); 
powOFsqrt2_inv = 1;
}}else if(a=='Y'){if(b=='X'){data[0][0] = std::complex<double>(0.000000, -1.000000); data[0][1] = std::complex<double>(0.000000, 0.000000); 
data[1][0] = std::complex<double>(0.000000, 0.000000); data[1][1] = std::complex<double>(0.000000, 1.000000); 
}else if(b=='Y'){data[0][0] = std::complex<double>(1.000000, 0.000000); data[0][1] = std::complex<double>(0.000000, 0.000000); 
data[1][0] = std::complex<double>(0.000000, 0.000000); data[1][1] = std::complex<double>(1.000000, 0.000000); 
}else if(b=='Z'){data[0][0] = std::complex<double>(0.000000, 0.000000); data[0][1] = std::complex<double>(0.000000, 1.000000); 
data[1][0] = std::complex<double>(0.000000, 1.000000); data[1][1] = std::complex<double>(0.000000, 0.000000); 
}else if(b=='S'){data[0][0] = std::complex<double>(0.000000, 0.000000); data[0][1] = std::complex<double>(1.000000, 0.000000); 
data[1][0] = std::complex<double>(0.000000, 1.000000); data[1][1] = std::complex<double>(0.000000, 0.000000); 
}else if(b=='H'){data[0][0] = std::complex<double>(0.000000, -1.000000); data[0][1] = std::complex<double>(0.000000, 1.000000); 
data[1][0] = std::complex<double>(0.000000, 1.000000); data[1][1] = std::complex<double>(0.000000, 1.000000); 
powOFsqrt2_inv = 1;
}}else if(a=='Z'){if(b=='X'){data[0][0] = std::complex<double>(0.000000, 0.000000); data[0][1] = std::complex<double>(1.000000, 0.000000); 
data[1][0] = std::complex<double>(-1.000000, 0.000000); data[1][1] = std::complex<double>(0.000000, 0.000000); 
}else if(b=='Y'){data[0][0] = std::complex<double>(0.000000, 0.000000); data[0][1] = std::complex<double>(0.000000, -1.000000); 
data[1][0] = std::complex<double>(0.000000, -1.000000); data[1][1] = std::complex<double>(0.000000, 0.000000); 
}else if(b=='Z'){data[0][0] = std::complex<double>(1.000000, 0.000000); data[0][1] = std::complex<double>(0.000000, 0.000000); 
data[1][0] = std::complex<double>(0.000000, 0.000000); data[1][1] = std::complex<double>(1.000000, 0.000000); 
}else if(b=='S'){data[0][0] = std::complex<double>(1.000000, 0.000000); data[0][1] = std::complex<double>(0.000000, 0.000000); 
data[1][0] = std::complex<double>(0.000000, 0.000000); data[1][1] = std::complex<double>(0.000000, -1.000000); 
}else if(b=='H'){data[0][0] = std::complex<double>(1.000000, 0.000000); data[0][1] = std::complex<double>(1.000000, 0.000000); 
data[1][0] = std::complex<double>(-1.000000, 0.000000); data[1][1] = std::complex<double>(1.000000, 0.000000); 
powOFsqrt2_inv = 1;
}}else if(a=='S'){if(b=='X'){data[0][0] = std::complex<double>(0.000000, 0.000000); data[0][1] = std::complex<double>(1.000000, 0.000000); 
data[1][0] = std::complex<double>(0.000000, 1.000000); data[1][1] = std::complex<double>(0.000000, 0.000000); 
}else if(b=='Y'){data[0][0] = std::complex<double>(0.000000, 0.000000); data[0][1] = std::complex<double>(0.000000, -1.000000); 
data[1][0] = std::complex<double>(-1.000000, 0.000000); data[1][1] = std::complex<double>(0.000000, 0.000000); 
}else if(b=='Z'){data[0][0] = std::complex<double>(1.000000, 0.000000); data[0][1] = std::complex<double>(0.000000, 0.000000); 
data[1][0] = std::complex<double>(0.000000, 0.000000); data[1][1] = std::complex<double>(0.000000, -1.000000); 
}else if(b=='S'){data[0][0] = std::complex<double>(1.000000, 0.000000); data[0][1] = std::complex<double>(0.000000, 0.000000); 
data[1][0] = std::complex<double>(0.000000, 0.000000); data[1][1] = std::complex<double>(-1.000000, 0.000000); 
}else if(b=='H'){data[0][0] = std::complex<double>(1.000000, 0.000000); data[0][1] = std::complex<double>(1.000000, 0.000000); 
data[1][0] = std::complex<double>(0.000000, 1.000000); data[1][1] = std::complex<double>(0.000000, -1.000000); 
powOFsqrt2_inv = 1;
}}else if(a=='H'){if(b=='X'){data[0][0] = std::complex<double>(1.000000, 0.000000); data[0][1] = std::complex<double>(1.000000, 0.000000); 
data[1][0] = std::complex<double>(-1.000000, 0.000000); data[1][1] = std::complex<double>(1.000000, 0.000000); 
powOFsqrt2_inv = 1;
}else if(b=='Y'){data[0][0] = std::complex<double>(0.000000, 1.000000); data[0][1] = std::complex<double>(0.000000, -1.000000); 
data[1][0] = std::complex<double>(0.000000, -1.000000); data[1][1] = std::complex<double>(0.000000, -1.000000); 
powOFsqrt2_inv = 1;
}else if(b=='Z'){data[0][0] = std::complex<double>(1.000000, 0.000000); data[0][1] = std::complex<double>(-1.000000, 0.000000); 
data[1][0] = std::complex<double>(1.000000, 0.000000); data[1][1] = std::complex<double>(1.000000, 0.000000); 
powOFsqrt2_inv = 1;
}else if(b=='S'){data[0][0] = std::complex<double>(1.000000, 0.000000); data[0][1] = std::complex<double>(0.000000, 1.000000); 
data[1][0] = std::complex<double>(1.000000, 0.000000); data[1][1] = std::complex<double>(0.000000, -1.000000); 
powOFsqrt2_inv = 1;
}else if(b=='H'){data[0][0] = std::complex<double>(1.000000, 0.000000); data[0][1] = std::complex<double>(0.000000, 0.000000); 
data[1][0] = std::complex<double>(0.000000, 0.000000); data[1][1] = std::complex<double>(1.000000, 0.000000); 
}}}
